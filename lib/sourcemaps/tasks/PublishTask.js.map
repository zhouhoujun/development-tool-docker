{"version":3,"sources":["tasks/PublishTask.ts"],"names":[],"mappings":"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","file":"../../tasks/PublishTask.js","sourcesContent":["\r\n// import { Gulp } from 'gulp';\r\nimport * as _ from 'lodash';\r\n// import * as path from 'path';\r\nimport { IDynamicTaskOption, IDynamicTasks, dynamicTask, task, ITaskContext, ITaskInfo, ITask, TaskResult } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport * as path from 'path';\r\nimport { DockerOption } from '../DockerOption';\r\nconst replace = require('gulp-replace');\r\n\r\nexport interface ServiceInfo {\r\n    composeFile: string;\r\n    images: string[];\r\n    service: string;\r\n    user: string;\r\n    psw: string;\r\n}\r\n\r\n// @task()\r\n// export class DockerCompose implements ITask {\r\n\r\n//     constructor(private info: ITaskInfo) {\r\n//     }\r\n\r\n//     /**\r\n//      * old filed.\r\n//      *\r\n//      * @type {ITaskInfo}\r\n//      * @memberOf ITask\r\n//      */\r\n//     getInfo(): ITaskInfo {\r\n//         this.info.name = this.info.name || 'DockerCompose';\r\n//         return this.info;\r\n//     }\r\n//     /**\r\n//      * setup task.\r\n//      *\r\n//      * @param {ITaskContext} context\r\n//      * @param {Gulp} [gulp]\r\n//      * @returns {TaskResult}\r\n//      *\r\n//      * @memberOf ITask\r\n//      */\r\n//     setup(context: ITaskContext, gulp?: Gulp): TaskResult {\r\n//         let info = this.getInfo();\r\n//         let option = context.option as DockerOption;\r\n//         context.generateTask(new DockerComposeDynamicTask().tasks())\r\n//         gulp.task(context.subTaskName(info), () => {\r\n\r\n//         });\r\n//     }\r\n// }\r\n\r\n@dynamicTask()\r\nexport class DockerComposeDynamicTask implements IDynamicTasks {\r\n    private publishImages = [];\r\n\r\n    private _info: ServiceInfo;\r\n    protected getServiceInfo(ctx: ITaskContext) {\r\n        if (!this._info) {\r\n            let option = ctx.option as DockerOption;\r\n            let imgs = ctx.toSrc(option.images);\r\n            this._info = <ServiceInfo>{\r\n                composeFile: ctx.toRootPath(ctx.to(option.composeFile) || './docker-compose.yml'),\r\n                images: _.isArray(imgs) ? imgs : [imgs],\r\n                service: ctx.env.publish || ctx.toStr(option.service),\r\n                user: ctx.env['user'] || ctx.toStr(option.user),\r\n                psw: ctx.env['psw'] || ctx.toStr(option.psw),\r\n            };\r\n        }\r\n        return this._info;\r\n    }\r\n\r\n    tasks(): IDynamicTaskOption[] {\r\n        return [\r\n            {\r\n                name: 'build-docker',\r\n                shell: (ctx) => {\r\n                    let cmds = '';\r\n\r\n                    let option = ctx.option as DockerOption;\r\n                    let info = this.getServiceInfo(ctx);\r\n                    let dist = path.dirname(info.composeFile);\r\n                    let buildcmd = ctx.toStr(option.buildcmd) || 'docker-compose down & docker-compose build';\r\n                    if (/^[C-Z]:/.test(dist)) {\r\n                        cmds = _.first(dist.split(':')) + ': & ';\r\n                    }\r\n                    cmds = cmds + `cd ${dist} & ${buildcmd}`;\r\n                    return cmds;\r\n                }\r\n\r\n            },\r\n            {\r\n                name: 'tag-docker',\r\n                shell: (ctx) => {\r\n                    let info = this.getServiceInfo(ctx);\r\n                    let cmds = '';\r\n\r\n                    let option = ctx.option as DockerOption;\r\n                    let version = '';\r\n                    if (option.version) {\r\n                        version = ctx.toStr(option.version);\r\n                    } else {\r\n                        let pkg = ctx.getPackage();\r\n                        if (pkg) {\r\n                            version = pkg.version;\r\n                        }\r\n                    }\r\n                    version = version || 'latest';\r\n\r\n                    _.each(info.images, it => {\r\n                        let pimg = info.service ? `${info.service}/${it}:${version}` : `${it}:${version}`;\r\n                        this.publishImages.push(pimg);\r\n                        cmds = cmds + `docker tag ${it} ${pimg} & `\r\n                    });\r\n\r\n                    cmds = cmds.substring(0, cmds.lastIndexOf('&'));\r\n                    return cmds;\r\n                }\r\n            },\r\n            {\r\n                name: 'push-docker',\r\n                shell: (ctx) => {\r\n                    let info = this.getServiceInfo(ctx);\r\n                    if (!info.service) {\r\n                        return '';\r\n                    }\r\n                    let option = ctx.option as DockerOption;\r\n                    let pushcmd = ctx.toStr(option.pushcmd) || 'docker push';\r\n                    return _.map(this.publishImages, mg => info.user ? `docker login -u ${info.user} -p ${info.psw} ${info.service} & ${pushcmd} ${mg}` : `${pushcmd} ${mg}`);\r\n                }\r\n            },\r\n            {\r\n                name: 'export-docker-compose',\r\n                pipes: (ctx) => {\r\n                    let info = this.getServiceInfo(ctx);\r\n                    let pipes = [(ctx) => replace(/build:/gi, '# build:'), (ctx) => replace(/#\\s*image:/gi, 'image:')];\r\n                    _.each(info.images, (img, idx) => {\r\n                        pipes.push(ctx => replace(img, this.publishImages[idx]));\r\n                    });\r\n                    return pipes;\r\n                }\r\n            },\r\n            {\r\n                name: 'save-docker-images',\r\n                shell: (ctx) => {\r\n                    let option = ctx.option as DockerOption;\r\n                    let info = this.getServiceInfo(ctx);\r\n                    let exportcmd = ctx.toStr(option.exportImagecmd) || 'docker save';\r\n                    let path = ctx.toUrl(ctx.getDist());\r\n                    return _.map(this.publishImages, (mg, idx) => option.exportImage ? ` ${exportcmd} ${mg} -o ${path}/${info.images[idx]}.tar` : ``);\r\n                }\r\n            }\r\n        ];\r\n    }\r\n}\r\n"]}