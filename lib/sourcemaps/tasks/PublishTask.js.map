{"version":3,"sources":["tasks/PublishTask.ts"],"names":["_","require","development_core_1","NodeDynamicTasks","this","publishImages","prototype","getServiceInfo","ctx","_info","option","imgs","toSrc","images","isArray","service","env","publish","toStr","user","psw","tasks","_this","name","oper","Operation","deploy","shell","cmds","dist","toUrl","getRootPath","test","first","split","info","each","it","pimg","push","substring","lastIndexOf","map","mg","__decorate","dynamicTask","exports"],"mappings":"6aACA,IAAAA,GAAAC,QAAA,UAEAC,mBAAAD,QAAA,oBAaaE,iBAAgB,WAD7B,QAAAA,KAEYC,KAAAC,iBA6DZ,MA1DcF,GAAAG,UAAAC,eAAV,SAAyBC,GACrB,IAAKJ,KAAKK,MAAO,CACb,GAAIC,GAASF,EAAIE,OACbC,EAAOH,EAAII,MAAMF,EAAOG,OAC5BT,MAAKK,OACDI,OAAQb,EAAEc,QAAQH,GAAQA,GAAQA,GAClCI,QAASP,EAAIQ,IAAIC,SAAWT,EAAIU,MAAMR,EAAOK,SAC7CI,KAAMX,EAAIQ,IAAU,MAAKR,EAAIU,MAAMR,EAAOS,MAC1CC,IAAKZ,EAAIQ,IAAS,KAAKR,EAAIU,MAAMR,EAAOU,MAGhD,MAAOhB,MAAKK,OAGhBN,EAAAG,UAAAe,MAAA,WAAA,GAAAC,GAAAlB,IACI,SAEQmB,KAAM,eACNC,KAAMtB,mBAAAuB,UAAUC,OAChBC,MAAO,SAACnB,GACJ,GAAIoB,GAAO,GACPC,EAAOrB,EAAIsB,MAAMtB,EAAIuB,cAKzB,OAJI,UAAUC,KAAKH,KACfD,EAAO5B,EAAEiC,MAAMJ,EAAKK,MAAM,MAAQ,QAEtCN,EAAOA,EAAO,MAAQC,EAAO,6BAQjCN,KAAM,aACNC,KAAMtB,mBAAAuB,UAAUC,OAChBC,MAAO,SAACnB,GACJ,GAAI2B,GAAOb,EAAKf,eAAeC,GAC3BoB,EAAO,EAQX,OAPA5B,GAAEoC,KAAKD,EAAKtB,OAAQ,SAAAwB,GAChB,GAAIC,GAAUH,EAAKpB,QAAO,IAAIsB,CAC9Bf,GAAKjB,cAAckC,KAAKD,GACxBV,EAAOA,EAAO,cAAcS,EAAE,IAAIC,EAAI,QAG1CV,EAAOA,EAAKY,UAAU,EAAGZ,EAAKa,YAAY,SAK9ClB,KAAM,cACNC,KAAMtB,mBAAAuB,UAAUC,OAChBC,MAAO,SAACnB,GACJ,GAAI2B,GAAOb,EAAKf,eAAeC,EAC/B,OAAOR,GAAE0C,IAAIpB,EAAKjB,cAAe,SAAAsC,GAAM,MAAAR,GAAKhB,KAAO,mBAAmBgB,EAAKhB,KAAI,OAAOgB,EAAKf,IAAG,IAAIe,EAAKpB,QAAO,kBAAkB4B,EAAO,eAAeA,QAK1KxC,IA9DaA,kBAAgByC,YAD5B1C,mBAAA2C,aACY1C,kBAAA2C,QAAA3C,iBAAAA","file":"../../tasks/PublishTask.js","sourcesContent":["\r\nimport * as _ from 'lodash';\r\n// import * as path from 'path';\r\nimport { IDynamicTaskOption, Operation, IDynamicTasks, dynamicTask, ITaskContext } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport { DockerOption } from '../DockerOption';\r\n\r\n\r\nexport interface ServiceInfo {\r\n    images: string[];\r\n    service: string;\r\n    user: string;\r\n    psw: string;\r\n}\r\n\r\n@dynamicTask\r\nexport class NodeDynamicTasks implements IDynamicTasks {\r\n    private publishImages = [];\r\n\r\n    private _info: ServiceInfo;\r\n    protected getServiceInfo(ctx: ITaskContext) {\r\n        if (!this._info) {\r\n            let option = ctx.option as DockerOption;\r\n            let imgs = ctx.toSrc(option.images);\r\n            this._info = <ServiceInfo>{\r\n                images: _.isArray(imgs) ? imgs : [imgs],\r\n                service: ctx.env.publish || ctx.toStr(option.service),\r\n                user: ctx.env['user'] || ctx.toStr(option.user),\r\n                psw: ctx.env['psw'] || ctx.toStr(option.psw),\r\n            };\r\n        }\r\n        return this._info;\r\n    }\r\n\r\n    tasks(): IDynamicTaskOption[] {\r\n        return [\r\n            {\r\n                name: 'build-docker',\r\n                oper: Operation.deploy,\r\n                shell: (ctx) => {\r\n                    let cmds = '';\r\n                    let dist = ctx.toUrl(ctx.getRootPath());\r\n                    if (/^[C-Z]:/.test(dist)) {\r\n                        cmds = _.first(dist.split(':')) + ': & ';\r\n                    }\r\n                    cmds = cmds + 'cd ' + dist + ' & docker-compose build';\r\n                    return cmds;\r\n                }\r\n\r\n            },\r\n\r\n            {\r\n\r\n                name: 'tag-docker',\r\n                oper: Operation.deploy,\r\n                shell: (ctx) => {\r\n                    let info = this.getServiceInfo(ctx);\r\n                    let cmds = '';\r\n                    _.each(info.images, it => {\r\n                        let pimg = `${info.service}/${it}`;\r\n                        this.publishImages.push(pimg);\r\n                        cmds = cmds + `docker tag ${it} ${pimg} & `\r\n                    });\r\n\r\n                    cmds = cmds.substring(0, cmds.lastIndexOf('&'));\r\n                    return cmds;\r\n                }\r\n            },\r\n            {\r\n                name: 'push-docker',\r\n                oper: Operation.deploy,\r\n                shell: (ctx) => {\r\n                    let info = this.getServiceInfo(ctx);\r\n                    return _.map(this.publishImages, mg => info.user ? `docker login -u ${info.user} -p ${info.psw} ${info.service} & docker push ${mg}` : `docker push ${mg}`);\r\n                }\r\n            }\r\n        ];\r\n    }\r\n}\r\n"]}